# PingPongGame

import java.awt.*;
import java.awt.image.BufferStrategy;


public class Game extends Canvas implements Runnable{

    public static final int WIDTH=700, HEIGHT=500;

    private Thread thread;
    private boolean running=false;
    private Handler handler;
    private Menu menu;

    public enum STATE{
        Menu,
        Game
    };

    public STATE gameState= STATE.Menu;

    public Game(){

        handler= new Handler();
        menu= new Menu(this, handler);

        new Window(WIDTH,HEIGHT,"Pong Game",this);
        this.addKeyListener(new KeyInput(handler));
        this.addMouseListener(menu);

    }

    public synchronized void start(){
        thread=new Thread(this);
        thread.start();
        running=true;
    }

    public synchronized void stop(){
        try {
            thread.join();
            running=false;
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }


    @Override
    public void run() {

        this.requestFocus();
        long lastTime = System.nanoTime();
        double amountOfTicks = 60.0;
        double ns = 1000000000 / amountOfTicks;
        double delta = 0;
        long timer = System.currentTimeMillis();
        int frames = 0;
        while(running){
            long now = System.nanoTime();
            delta += (now - lastTime) / ns;
            lastTime = now;
            while(delta >= 1){
                tick();
                delta--;
            }
            if(running)
                render();
            frames++;
            if(System.currentTimeMillis() - timer > 1000){
                timer += 1000;
                // System.out.println("FPS: " + frames);
                frames = 0;
            }
        }
        stop();
    }

   public void tick() {

           handler.tick();
           if(gameState==STATE.Menu){
               menu.tick();
           }
   }

   public void render(){

       BufferStrategy bs= this.getBufferStrategy();
       if(bs==null){
           this.createBufferStrategy(3);
           return;
       }

       Graphics g= bs.getDrawGraphics();

       g.setColor(Color.BLACK);
       g.fillRect(0,0,WIDTH,HEIGHT);

       handler.render(g);

       if(gameState==STATE.Menu){
          menu.render(g);
       }

       g.dispose();
       bs.show();
   }

   public static float clamp(float var, float min, float max){
       if(var<=min){
           return var=min;
       }
       else if(var>=max){
           return var=max;
       }
       else{
           return var;
       }
   }

    public static void main(String[] args) {
        new Game();
    }
}
